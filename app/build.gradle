apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.getkeepsafe.dexcount'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.0"
    defaultConfig {
        applicationId "tweentyscoops.mvp.kotlin"
        minSdkVersion 17
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        buildConfigField("String", "DEVICE_TYEP", '"android"')
    }
    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        warning 'InvalidPackage'
    }
//    signingConfigs {
//        release {
//            storeFile file("twentyscoops.jks")
//            storePassword "twentyscoops"
//            keyAlias "twentyscoops"
//            keyPassword "twentyscoops"
//        }
//    }
    productFlavors {
        production {
            buildConfigField("String", "SERVER", '"http:s//api.github.com/"')
        }

        staging {
            applicationIdSuffix '.staging'
            versionNameSuffix "-STAGING"
            buildConfigField("String", "SERVER", '"https://api.github.com/"')
        }

        develop {
            applicationIdSuffix '.dev'
            versionNameSuffix "-DEV"
            buildConfigField("String", "SERVER", '"https://api.github.com/"')
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    testCompile 'org.hamcrest:hamcrest-library:' + rootProject.ext.hamcrest_version
    testCompile 'org.powermock:powermock-api-mockito:' + rootProject.ext.powermock_version
    testCompile 'org.powermock:powermock-module-junit4:' + rootProject.ext.powermock_version
    testCompile 'org.powermock:powermock-core:' + rootProject.ext.powermock_version

    compile 'com.android.support:appcompat-v7:' + rootProject.ext.support_version
    compile 'com.android.support:design:' + rootProject.ext.support_version
    compile 'com.android.support:cardview-v7:' + rootProject.ext.support_version

    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

    compile 'com.google.dagger:dagger:' + rootProject.ext.dagger2_version
    kapt 'com.google.dagger:dagger-compiler:' + rootProject.ext.dagger2_version

    compile 'com.google.code.gson:gson:' + rootProject.ext.gson_version
    compile 'io.reactivex.rxjava2:rxandroid:' + rootProject.ext.rx_android_version
    compile 'io.reactivex.rxjava2:rxkotlin:' + rootProject.ext.rx_version

    compile 'com.squareup.retrofit2:retrofit:' + rootProject.ext.retrofit_version
    compile 'com.squareup.retrofit2:converter-gson:' + rootProject.ext.retrofit_version
    compile 'com.squareup.retrofit2:adapter-rxjava2:' + rootProject.ext.retrofit_version

    compile 'org.parceler:parceler-api:' + rootProject.ext.parceler_version
    kapt 'org.parceler:parceler:' + rootProject.ext.parceler_version

    compile 'com.github.bumptech.glide:glide:' + rootProject.ext.glide_version
    kapt 'com.github.bumptech.glide:compiler:' + rootProject.ext.glide_version

    compile('com.hwangjr.rxbus:rxbus:2.0.0') {
        exclude group: 'com.jakewharton.timber', module: 'timber'
    }
    compile 'com.squareup.okhttp3:logging-interceptor:3.8.0'
    compile 'com.orhanobut:logger:2.1.1'
    compile 'com.karumi:dexter:4.1.0'
    provided 'javax.annotation:jsr250-api:1.0'
    compile 'uk.co.chrisjenx:calligraphy:2.3.0'
    compile 'com.akexorcist:localizationactivity:1.1.2'
}

kapt {
    generateStubs = true
}

configurations.all {
    resolutionStrategy {
        force "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    }
}

repositories {
    mavenCentral()
}

tasks.withType(Test) {
    testLogging {
        events "passed", "skipped", "failed", "standardOut"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        debug {
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}